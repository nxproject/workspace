// Generated on 3/24/2021 4:32:48 PM
import { OutcomeNames } from "../models/outcome-names";
import pluginStore from '../services/workflow-plugin-store';
export class TaskActivities {
    constructor() {
        this.getName = () => "TaskActivities";
        this.getActivityDefinitions = () => ([
            this.noop(),
            this.addressgeocode(),
            this.addressvalidate(),
            this.arrayappend(),
            this.arrayeach(),
            this.arraypop(),
            this.arraypush(),
            this.arrayshift(),
            this.arrayunshift(),
            this.arrayuse(),
            this.textaddtext(),
            this.textaddword(),
            this.textappendparagraph(),
            this.textadddoclist(),
            this.textinsertparagraph(),
            this.textload(),
            this.texttext(),
            this.textuse(),
            this.msgactionadd(),
            this.msgattachmentadd(),
            this.msgtoadd(),
            this.msgactionsclear(),
            this.msgattachmentsclear(),
            this.msgtosclear(),
            this.msgremove(),
            this.msgsettemplateemail(),
            this.msgsetfooter(),
            this.msgsetitem(),
            this.msgsetmessage(),
            this.msgsetpost(),
            this.msgsettemplatesms(),
            this.msgsetsubject(),
            this.msguse(),
            this.send(),
            this.doclistadd(),
            this.doclistclear(),
            this.doclistdelete(),
            this.doclisteach(),
            this.doclistobj(),
            this.doclistremove(),
            this.docadd(),
            this.docclear(),
            this.doccopy(),
            this.docdelete(),
            this.docremove(),
            this.docrename(),
            this.docsave(),
            this.mergedoc(),
            this.python(),
            this.sendtweet(),
            this.call(),
            this.end(),
            this.switch(),
            this.objlist(),
            this.objlistadd(),
            this.objlistclear(),
            this.objlistdelete(),
            this.objlisteach(),
            this.objlistpick(),
            this.objlistremove(),
            this.objadd(),
            this.objaddlink(),
            this.objaddparent(),
            this.objalias(),
            this.objapply(),
            this.objcopy(),
            this.objcreate(),
            this.objdelete(),
            this.objdoccopy(),
            this.objdoclist(),
            this.objeach(),
            this.objlu(),
            this.objorganizer(),
            this.objpick(),
            this.objremove(),
            this.objsave(),
            this.objset(),
            this.objtouch(),
            this.objuse(),
            this.objloadstore(),
            this.setlink(),
            this.setparent(),
            this.continueon(),
            this.onerror(),
            this.pdfone(),
            this.pdfsplit(),
            this.queryuse(),
            this.queryadd(),
            this.storeclear(),
            this.storeeach(),
            this.storeloadchanges(),
            this.storeloadobject(),
            this.storeloadstring(),
            this.storeremove(),
            this.storeuse(),
            this.decr(),
            this.incr(),
            this.set(),
            this.ttcontinue(),
            this.ttfreeze(),
            this.ttstart(),
            this.ttstop(),
            this.trace(),
            this.traceend(),
            this.tracesend(),
            this.uspsvalidate(),
            this.uspszip(),
            this.uspscitystate(),
            this.ftpchangedir(),
            this.ftpclose(),
            this.ftpdelete(),
            this.ftpdownload(),
            this.ftpdownloadlist(),
            this.ftpopen(),
            this.ftpupload(),
            this.ftpuse(),
            this.httpcookieget(),
            this.httpcookieset(),
            this.httpget(),
            this.httpuse(),
            this.workflowend(),
            this.workflowstart(),
            this.docpdf(),
            this.wordpop(),
            this.wordpush(),
            this.wordshift(),
            this.wordunshift()
        ]);
        this.noop = () => ({ type: 'noop', displayName: 'noop,', description: 'Does nothing,', category: 'Flow', icon: 'fas fa-code-branch', outcomes: [OutcomeNames.Done], properties: [] });
        this.addressgeocode = () => ({ type: 'address.geocode', displayName: 'address.geocode,', description: 'Gets the latitude and longitude of an address,', category: 'Address', icon: 'fas fa-map-marker-alt', outcomes: [OutcomeNames.Done], properties: [{ name: 'addr', type: 'expression', label: 'Addr', hint: 'The address field' }, { name: 'city', type: 'expression', label: 'City', hint: 'The city field' }, { name: 'state', type: 'expression', label: 'State', hint: 'The state field' }, { name: 'zip', type: 'expression', label: 'Zip', hint: 'The zip field' }, { name: 'lat', type: 'expression', label: 'Lat', hint: 'The latitude field' }, { name: 'long', type: 'expression', label: 'Long', hint: 'The longitude field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.addressvalidate = () => ({ type: 'address.validate', displayName: 'address.validate,', description: 'Validates an address,', category: 'Address', icon: 'fas fa-map-marker-alt', outcomes: [OutcomeNames.Done], properties: [{ name: 'addr', type: 'expression', label: 'Addr', hint: 'The address field' }, { name: 'city', type: 'expression', label: 'City', hint: 'The city field' }, { name: 'state', type: 'expression', label: 'State', hint: 'The state field' }, { name: 'zip', type: 'expression', label: 'Zip', hint: 'The zip field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arrayappend = () => ({ type: 'array.append', displayName: 'array.append,', description: 'Appends word or words from a value,', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'split', type: 'expression', label: 'Split', hint: 'If true, the value is broken by spaces' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arrayeach = () => ({ type: 'array.each', displayName: 'array.each,', description: 'Calls a task for each object in the list.  The working object is found at [*l:listobj] and the count is at [*l:listcount],', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done, OutcomeNames.Call], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field to use for the current value' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store to use for the current value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arraypop = () => ({ type: 'array.pop', displayName: 'array.pop,', description: 'Pops a store from an array (remove last),', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arraypush = () => ({ type: 'array.push', displayName: 'array.push,', description: 'Pushes a store into an array (add last),', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arrayshift = () => ({ type: 'array.shift', displayName: 'array.shift,', description: 'Shift a store from an array (remove first),', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arrayunshift = () => ({ type: 'array.unshift', displayName: 'array.unshift,', description: 'Unshift a store from an array (add first),', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.arrayuse = () => ({ type: 'array.use', displayName: 'array.use,', description: 'Sets the default array,', category: 'Array', icon: 'fas fa-layer-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'array', type: 'expression', label: 'Array', hint: 'The name of the array' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textaddtext = () => ({ type: 'text.add.text', displayName: 'text.add.text,', description: 'Adds text to a text line,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'line', type: 'expression', label: 'Line', hint: 'The row' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textaddword = () => ({ type: 'text.add.word', displayName: 'text.add.word,', description: 'Adds text to a text line,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'line', type: 'expression', label: 'Line', hint: 'The row' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textappendparagraph = () => ({ type: 'text.append.paragraph', displayName: 'text.append.paragraph,', description: 'Appends a new word to a text,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textadddoclist = () => ({ type: 'text.add.doclist', displayName: 'text.add.doclist,', description: 'Appends a block of doc names to a memo,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'line', type: 'expression', label: 'Line', hint: 'The row' }, { name: 'delim', type: 'expression', label: 'Delim', hint: 'The delimiter' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textinsertparagraph = () => ({ type: 'text.insert.paragraph', displayName: 'text.insert.paragraph,', description: 'Inserts a new paragraph to a text,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'line', type: 'expression', label: 'Line', hint: 'The row to insert before' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textload = () => ({ type: 'text.load', displayName: 'text.load,', description: 'Copies a value into a text area,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.texttext = () => ({ type: 'text.text', displayName: 'text.text,', description: 'Copies text into a field,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.textuse = () => ({ type: 'text.use', displayName: 'text.use,', description: 'Sets the default text,', category: 'Text', icon: 'fas fa-paragraph', outcomes: [OutcomeNames.Done], properties: [{ name: 'text', type: 'expression', label: 'Text', hint: 'The text name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgactionadd = () => ({ type: 'msg.action.add', displayName: 'msg.action.add,', description: 'Adds an action to the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'task', type: 'expression', label: 'Task', hint: 'The task' }, { name: 'name', type: 'expression', label: 'Name', hint: 'The name to display' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgattachmentadd = () => ({ type: 'msg.attachment.add', displayName: 'msg.attachment.add,', description: 'Adds an attachment to the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'doc', type: 'expression', label: 'Doc', hint: 'The document' }, { name: 'name', type: 'expression', label: 'Name', hint: 'The name to display' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgtoadd = () => ({ type: 'msg.to.add', displayName: 'msg.to.add,', description: 'Adds an addressee to the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'to', type: 'expression', label: 'To', hint: 'The to' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgactionsclear = () => ({ type: 'msg.actions.clear', displayName: 'msg.actions.clear,', description: 'Removes all actions from the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgattachmentsclear = () => ({ type: 'msg.attachments.clear', displayName: 'msg.attachments.clear,', description: 'Removes all attachments from the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgtosclear = () => ({ type: 'msg.tos.clear', displayName: 'msg.tos.clear,', description: 'Removes all tos from the message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgremove = () => ({ type: 'msg.remove', displayName: 'msg.remove,', description: 'Removes the message from the stack,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to remove' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsettemplateemail = () => ({ type: 'msg.set.template.email', displayName: 'msg.set.template.email,', description: 'Sets the message EMail template,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The template' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsetfooter = () => ({ type: 'msg.set.footer', displayName: 'msg.set.footer,', description: 'Sets the message footer text,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The footer text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsetitem = () => ({ type: 'msg.set.item', displayName: 'msg.set.item,', description: 'Sets the message item text,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'item', type: 'expression', label: 'Item', hint: 'The  item' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The  text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsetmessage = () => ({ type: 'msg.set.message', displayName: 'msg.set.message,', description: 'Sets the message text,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The body text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsetpost = () => ({ type: 'msg.set.post', displayName: 'msg.set.post,', description: 'Sets the message post text,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The post text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsettemplatesms = () => ({ type: 'msg.set.template.sms', displayName: 'msg.set.template.sms,', description: 'Sets the message SMS template,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The template' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msgsetsubject = () => ({ type: 'msg.set.subject', displayName: 'msg.set.subject,', description: 'Sets the message subject,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The subject' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.msguse = () => ({ type: 'msg.use', displayName: 'msg.use,', description: 'Sets the default message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.send = () => ({ type: 'send', displayName: 'send,', description: 'Sends a message,', category: 'Comm', icon: 'fas fa-tty', outcomes: [OutcomeNames.Done], properties: [{ name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to be sent' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclistadd = () => ({ type: 'doc.list.add', displayName: 'doc.list.add,', description: 'Adds a document to the list,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document name to add' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclistclear = () => ({ type: 'doc.list.clear', displayName: 'doc.list.clear,', description: 'Empties a list,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list to be emptied' }, { name: 'remove', type: 'expression', label: 'Remove', hint: 'Remove documents' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclistdelete = () => ({ type: 'doc.list.delete', displayName: 'doc.list.delete,', description: 'Deletes all the documents in list,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclisteach = () => ({ type: 'doc.list.each', displayName: 'doc.list.each,', description: 'Calls code for each document in the list,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done, OutcomeNames.OnError, OutcomeNames.Call], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'doc', type: 'expression', label: 'Doc', hint: 'The field to put the document name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclistobj = () => ({ type: 'doc.list.obj', displayName: 'doc.list.obj,', description: 'Creates a document list from an objects folder,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The source object' }, { name: 'folder', type: 'expression', label: 'Folder', hint: 'The folder' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doclistremove = () => ({ type: 'doc.list.remove', displayName: 'doc.list.remove,', description: 'Removes a document from the list,', category: 'Document List', icon: 'fas fa-folder', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document name to remove' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docadd = () => ({ type: 'doc.add', displayName: 'doc.add,', description: 'Adds a document to the working set,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'name', type: 'expression', label: 'Name', hint: 'The name to be used' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object which is the parent' }, { name: 'path', type: 'expression', label: 'Path', hint: 'The path of the document' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docclear = () => ({ type: 'doc.clear', displayName: 'doc.clear,', description: 'Clears all documents,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.doccopy = () => ({ type: 'doc.copy', displayName: 'doc.copy,', description: 'Copies a document,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'from', type: 'expression', label: 'From', hint: 'The source document name' }, { name: 'to', type: 'expression', label: 'To', hint: 'The target document name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docdelete = () => ({ type: 'doc.delete', displayName: 'doc.delete,', description: 'Removes a document from the list and deletes it from storage,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The name of the document to be deleted' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docremove = () => ({ type: 'doc.remove', displayName: 'doc.remove,', description: 'Removes a document from the list,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document to be removed' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docrename = () => ({ type: 'doc.rename', displayName: 'doc.rename,', description: 'Renames a document,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'from', type: 'expression', label: 'From', hint: 'The source document name' }, { name: 'as', type: 'expression', label: 'As', hint: 'The target document physical name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docsave = () => ({ type: 'doc.save', displayName: 'doc.save,', description: 'Saves a document,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The name of the document to be saved' }, { name: 'text', type: 'expression', label: 'Text', hint: 'The text' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.mergedoc = () => ({ type: 'merge.doc', displayName: 'merge.doc,', description: 'Merges a .DOCX or .PDF file with values from the context,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document to be merged' }, { name: 'to', type: 'expression', label: 'To', hint: 'The merged PDF document' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.python = () => ({ type: 'python', displayName: 'python,', description: 'Runs a python script,', category: 'External', icon: 'fas fa-concierge-bell', outcomes: [OutcomeNames.Done], properties: [{ name: 'code', type: 'expression', label: 'Code', hint: 'Document that holds the python script.  Entry point should have two args, env - the workign environment and args - the parameters passed' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.sendtweet = () => ({ type: 'send.tweet', displayName: 'send.tweet,', description: 'Sends a tweet,', category: 'External', icon: 'fas fa-concierge-bell', outcomes: [OutcomeNames.Done], properties: [{ name: 'consumerKey', type: 'expression', label: 'ConsumerKey', hint: 'Your consumer key from Twitter' }, { name: 'consumerSecret', type: 'expression', label: 'ConsumerSecret', hint: 'Your secret key from Twitter' }, { name: 'accessToken', type: 'expression', label: 'AccessToken', hint: 'Your access token from Twitter' }, { name: 'accessTokenSecret', type: 'expression', label: 'AccessTokenSecret', hint: 'Your access token secret from Twitter' }, { name: 'msg', type: 'expression', label: 'Msg', hint: 'The message to be tweeted' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.call = () => ({ type: 'call', displayName: 'call,', description: 'Calls a task, returning to calling task on exit,', category: 'Flow', icon: 'fas fa-code-branch', outcomes: [OutcomeNames.Done], properties: [{ name: 'task', type: 'expression', label: 'Task', hint: 'The task to be called' }, { name: 'store', type: 'expression', label: 'Store', hint: 'Store to pass as passed' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.end = () => ({ type: 'end', displayName: 'end,', description: 'Ends a task,', category: 'Flow', icon: 'fas fa-code-branch', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'Store to return' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.switch = () => ({ type: 'switch', displayName: 'switch,', description: 'Switch execution based on a given expression,', runtimeDescription: 'x => !!x.state.expression ? `Switch execution based on <strong>${ x.state.expression.expression }</strong>.` : x.definition.description', category: 'Flow', icon: 'fas fa-code-branch', outcomes: 'x => x.state.cases', properties: [{ name: 'expression', type: 'expression', label: 'Expression', hint: 'The expression to evaluate. The evaluated value will be used to switch on' }, { name: 'cases', type: 'list', label: 'Cases', hint: 'A comma-separated list of possible outcomes of the expression' }] });
        this.objlist = () => ({ type: 'obj.list', displayName: 'obj.list,', description: 'Creates a list of objects using a query,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'query', type: 'expression', label: 'Query', hint: 'The store that is the query' }, { name: 'sortby', type: 'expression', label: 'Sortby', hint: 'Sort by' }, { name: 'limit', type: 'expression', label: 'Limit', hint: 'Max number of objects to return' }, { name: 'skip', type: 'expression', label: 'Skip', hint: 'Number of objects to skip' }, { name: 'dir', type: 'expression', label: 'Dir', hint: 'Direction of sort (asc/desc)' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlistadd = () => ({ type: 'obj.list.add', displayName: 'obj.list.add,', description: 'Adds an object to the list,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object name to add' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlistclear = () => ({ type: 'obj.list.clear', displayName: 'obj.list.clear,', description: 'Empties a list,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list to be emptied' }, { name: 'remove', type: 'expression', label: 'Remove', hint: 'Remove objects' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlistdelete = () => ({ type: 'obj.list.delete', displayName: 'obj.list.delete,', description: 'Deletes all objects in the list,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlisteach = () => ({ type: 'obj.list.each', displayName: 'obj.list.each,', description: 'Calls a chore for each object in the list.  The working object is found at [*l:listobj] and the count is at [*l:listcount],', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done, OutcomeNames.OnError, OutcomeNames.Call], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The object name to use inside the chore' }, { name: 'store', type: 'expression', label: 'Store', hint: 'Store to pass as passed' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlistpick = () => ({ type: 'obj.list.pick', displayName: 'obj.list.pick,', description: 'Creates an object list using a query,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The name of the list' }, { name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'query', type: 'expression', label: 'Query', hint: 'The store that is the query' }, { name: 'sortby', type: 'expression', label: 'Sortby', hint: 'Sort by' }, { name: 'limit', type: 'expression', label: 'Limit', hint: 'Max number of objects to return' }, { name: 'skip', type: 'expression', label: 'Skip', hint: 'Number of objects to skip' }, { name: 'dir', type: 'expression', label: 'Dir', hint: 'Direction of sort (asc/desc)' }, { name: 'merge', type: 'expression', label: 'Merge', hint: 'True if lists are merged' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlistremove = () => ({ type: 'obj.list.remove', displayName: 'obj.list.remove,', description: 'Removes an object from the list,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object name to remove' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objadd = () => ({ type: 'obj.add', displayName: 'obj.add,', description: 'Adds an object to the working stack,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'id', type: 'expression', label: 'Id', hint: 'The id of the object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objaddlink = () => ({ type: 'obj.add.link', displayName: 'obj.add.link,', description: 'Adds a link of an object to the working stack,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The link field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objaddparent = () => ({ type: 'obj.add.parent', displayName: 'obj.add.parent,', description: 'Adds the parent of an object to the working stack,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'from', type: 'expression', label: 'From', hint: 'The name of the source object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objalias = () => ({ type: 'obj.alias', displayName: 'obj.alias,', description: 'Aliases an object to the working stack,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'from', type: 'expression', label: 'From', hint: 'The curent object name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objapply = () => ({ type: 'obj.apply', displayName: 'obj.apply,', description: 'Applies a store to an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The source object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objcopy = () => ({ type: 'obj.copy', displayName: 'obj.copy,', description: 'Copies one object to another,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the source object' }, { name: 'to', type: 'expression', label: 'To', hint: 'The name of the target object' }, { name: 'flds', type: 'expression', label: 'Flds', hint: 'Fields to include' }, { name: 'excl', type: 'expression', label: 'Excl', hint: 'Fields to exclude' }, { name: 'ext', type: 'expression', label: 'Ext', hint: 'Copy extensions' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objcreate = () => ({ type: 'obj.create', displayName: 'obj.create,', description: 'Creates a new working object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store holding the values' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'parent', type: 'expression', label: 'Parent', hint: 'The name of the parent object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objdelete = () => ({ type: 'obj.delete', displayName: 'obj.delete,', description: 'Deletes the object from the database and from the working set,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objdoccopy = () => ({ type: 'obj.doc.copy', displayName: 'obj.doc.copy,', description: 'Copies all documents from an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to use' }, { name: 'to', type: 'expression', label: 'To', hint: 'The target object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objdoclist = () => ({ type: 'obj.doc.list', displayName: 'obj.doc.list,', description: 'Creates a document list from an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to use' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objeach = () => ({ type: 'obj.each', displayName: 'obj.each,', description: 'Call code for each object in a query,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done, OutcomeNames.OnError, OutcomeNames.Call], properties: [{ name: 'list', type: 'expression', label: 'List', hint: 'The list' }, { name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'query', type: 'expression', label: 'Query', hint: 'The store that is the query' }, { name: 'sortby', type: 'expression', label: 'Sortby', hint: 'Sort by' }, { name: 'limit', type: 'expression', label: 'Limit', hint: 'Max number of objects to return' }, { name: 'skip', type: 'expression', label: 'Skip', hint: 'Number of objects to skip' }, { name: 'dir', type: 'expression', label: 'Dir', hint: 'Direction of sort (asc/desc)' }, { name: 'as', type: 'expression', label: 'As', hint: 'The name of the passed object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objlu = () => ({ type: 'obj.lu', displayName: 'obj.lu,', description: 'Carries out lookup on a field,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objorganizer = () => ({ type: 'obj.organizer', displayName: 'obj.organizer,', description: 'Creates an organizer for the object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to use' }, { name: 'options', type: 'expression', label: 'Options', hint: 'The dataset options' }, { name: 'doc', type: 'expression', label: 'Doc', hint: 'The document' }, { name: 'folder', type: 'expression', label: 'Folder', hint: 'The folder' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objpick = () => ({ type: 'obj.pick', displayName: 'obj.pick,', description: 'Gets or creates an object using a query,', category: 'Object List', icon: 'fas fa-object-group', outcomes: [OutcomeNames.Done], properties: [{ name: 'name', type: 'expression', label: 'Name', hint: 'The name of the object' }, { name: 'ds', type: 'expression', label: 'Ds', hint: 'The dataset of the object' }, { name: 'query', type: 'expression', label: 'Query', hint: 'The store that is the query' }, { name: 'sortby', type: 'expression', label: 'Sortby', hint: 'Sort by' }, { name: 'limit', type: 'expression', label: 'Limit', hint: 'Max number of objects to return' }, { name: 'skip', type: 'expression', label: 'Skip', hint: 'Number of objects to skip' }, { name: 'dir', type: 'expression', label: 'Dir', hint: 'Direction of sort (asc/desc)' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store holding the values' }, { name: 'parent', type: 'expression', label: 'Parent', hint: 'The name of the parent object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objremove = () => ({ type: 'obj.remove', displayName: 'obj.remove,', description: 'Removes the object from working set,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objsave = () => ({ type: 'obj.save', displayName: 'obj.save,', description: 'Saves the working object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'tasks', type: 'expression', label: 'Tasks', hint: 'If true (non zero) allow tasks, otherwise disallow' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objset = () => ({ type: 'obj.set', displayName: 'obj.set,', description: 'Sets a value in a field of an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field to set' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objtouch = () => ({ type: 'obj.touch', displayName: 'obj.touch,', description: 'Flags the field as changed,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to use' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objuse = () => ({ type: 'obj.use', displayName: 'obj.use,', description: 'Sets the default object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.objloadstore = () => ({ type: 'obj.load.store', displayName: 'obj.load.store,', description: 'Copies a store into an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.setlink = () => ({ type: 'set.link', displayName: 'set.link,', description: 'Sets a link to an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'link', type: 'expression', label: 'Link', hint: 'The linked object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.setparent = () => ({ type: 'set.parent', displayName: 'set.parent,', description: 'Sets the parent of an object,', category: 'Object', icon: 'fas fa-vector-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'link', type: 'expression', label: 'Link', hint: 'The linked object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.continueon = () => ({ type: 'continue.on', displayName: 'continue.on,', description: 'Continues an an on.xxx call,', category: 'Flow', icon: 'fas fa-code-branch', outcomes: [], properties: [{ name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.onerror = () => ({ type: 'on.error', displayName: 'on.error,', description: 'Sets the default process to handle errors,', category: 'Flow', icon: 'fas fa-code-branch', outcomes: [OutcomeNames.Done, OutcomeNames.OnError], properties: [{ name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.pdfone = () => ({ type: 'pdf.one', displayName: 'pdf.one,', description: 'Merges multiple .PDF files into one,', category: 'PDF', icon: 'fas fa-file-pdf', outcomes: [OutcomeNames.Done], properties: [{ name: 'doclist', type: 'expression', label: 'Doclist', hint: 'The document list to be merged' }, { name: 'to', type: 'expression', label: 'To', hint: 'The merged document' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.pdfsplit = () => ({ type: 'pdf.split', displayName: 'pdf.split,', description: 'Splits one .PDF file into multiple by page count,', category: 'PDF', icon: 'fas fa-file-pdf', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document to be split' }, { name: 'pages', type: 'expression', label: 'Pages', hint: 'The page count (<0 if skip, * if pages left over)' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.queryuse = () => ({ type: 'query.use', displayName: 'query.use,', description: 'Sets the default query,', category: 'Query', icon: 'fas fa-question', outcomes: [OutcomeNames.Done], properties: [{ name: 'query', type: 'expression', label: 'Query', hint: 'The query to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.queryadd = () => ({ type: 'query.add', displayName: 'query.add,', description: 'Sets a query expression,', category: 'Query', icon: 'fas fa-question', outcomes: [OutcomeNames.Done], properties: [{ name: 'query', type: 'expression', label: 'Query', hint: 'The query' }, { name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'op', type: 'expression', label: 'Op', hint: 'The operation' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeclear = () => ({ type: 'store.clear', displayName: 'store.clear,', description: 'Clears all values in the store,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to clear' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeeach = () => ({ type: 'store.each', displayName: 'store.each,', description: 'Calls code, passing an element of the array,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done, OutcomeNames.OnError, OutcomeNames.Call], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'Store to use' }, { name: 'field', type: 'expression', label: 'Field', hint: 'Field in to use to pass name' }, { name: 'value', type: 'expression', label: 'Value', hint: 'Field in to use to pass value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeloadchanges = () => ({ type: 'store.load.changes', displayName: 'store.load.changes,', description: 'Loads a store from changes in object,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to load' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeloadobject = () => ({ type: 'store.load.object', displayName: 'store.load.object,', description: 'Loads a store from object,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to load' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The object' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeloadstring = () => ({ type: 'store.load.string', displayName: 'store.load.string,', description: 'Loads a store from a string,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to load' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeremove = () => ({ type: 'store.remove', displayName: 'store.remove,', description: 'Removes the store from the stack,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to remove' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.storeuse = () => ({ type: 'store.use', displayName: 'store.use,', description: 'Sets the default store,', category: 'Store', icon: 'fas fa-database', outcomes: [OutcomeNames.Done], properties: [{ name: 'store', type: 'expression', label: 'Store', hint: 'The store to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.decr = () => ({ type: 'decr', displayName: 'decr,', description: 'Decrements a field,', category: 'Ops', icon: 'fas fa-plus-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value to decrement by' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.incr = () => ({ type: 'incr', displayName: 'incr,', description: 'Increments a field,', category: 'Ops', icon: 'fas fa-plus-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value to increment by' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.set = () => ({ type: 'set', displayName: 'set,', description: 'Sets a value,', category: 'Ops', icon: 'fas fa-plus-square', outcomes: [OutcomeNames.Done], properties: [{ name: 'field', type: 'expression', label: 'Field', hint: 'The field' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ttcontinue = () => ({ type: 'tt.continue', displayName: 'tt.continue,', description: 'Continues time tracking,', category: 'Time Track', icon: 'fas fa-clock', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'type', type: 'expression', label: 'Type', hint: 'The type of tag' }, { name: 'user', type: 'expression', label: 'User', hint: 'The user' }, { name: 'reason', type: 'expression', label: 'Reason', hint: 'The reason of the freeze' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ttfreeze = () => ({ type: 'tt.freeze', displayName: 'tt.freeze,', description: 'Freezes time tracking,', category: 'Time Track', icon: 'fas fa-clock', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'type', type: 'expression', label: 'Type', hint: 'The type of tag' }, { name: 'user', type: 'expression', label: 'User', hint: 'The user' }, { name: 'reason', type: 'expression', label: 'Reason', hint: 'The reason of the freeze' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ttstart = () => ({ type: 'tt.start', displayName: 'tt.start,', description: 'Starts time tracking,', category: 'Time Track', icon: 'fas fa-clock', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'type', type: 'expression', label: 'Type', hint: 'The type of tag' }, { name: 'user', type: 'expression', label: 'User', hint: 'The user' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ttstop = () => ({ type: 'tt.stop', displayName: 'tt.stop,', description: 'Stops time tracking,', category: 'Time Track', icon: 'fas fa-clock', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'type', type: 'expression', label: 'Type', hint: 'The type of tag' }, { name: 'user', type: 'expression', label: 'User', hint: 'The user' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.trace = () => ({ type: 'trace', displayName: 'trace,', description: 'Starts the trace mode,', category: 'Trace', icon: 'fas fa-search', outcomes: [OutcomeNames.Done], properties: [{ name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.traceend = () => ({ type: 'trace.end', displayName: 'trace.end,', description: 'Ends the trace mode,', category: 'Trace', icon: 'fas fa-search', outcomes: [OutcomeNames.Done], properties: [{ name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.tracesend = () => ({ type: 'trace.send', displayName: 'trace.send,', description: 'Sends the trace,', category: 'Trace', icon: 'fas fa-search', outcomes: [OutcomeNames.Done], properties: [{ name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.uspsvalidate = () => ({ type: 'usps.validate', displayName: 'usps.validate,', description: 'Validates an address,', category: 'USPS', icon: 'fas fa-envelope', outcomes: [OutcomeNames.Done], properties: [{ name: 'address', type: 'expression', label: 'Address', hint: 'The address' }, { name: 'city', type: 'expression', label: 'City', hint: 'The city' }, { name: 'state', type: 'expression', label: 'State', hint: 'The state' }, { name: 'zip', type: 'expression', label: 'Zip', hint: 'The zip' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.uspszip = () => ({ type: 'usps.zip', displayName: 'usps.zip,', description: 'Returns the ZIP for an address,', category: 'USPS', icon: 'fas fa-envelope', outcomes: [OutcomeNames.Done], properties: [{ name: 'city', type: 'expression', label: 'City', hint: 'The city' }, { name: 'state', type: 'expression', label: 'State', hint: 'The state' }, { name: 'zip', type: 'expression', label: 'Zip', hint: 'The zip' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.uspscitystate = () => ({ type: 'usps.citystate', displayName: 'usps.citystate,', description: 'Returns the city and state for an address,', category: 'USPS', icon: 'fas fa-envelope', outcomes: [OutcomeNames.Done], properties: [{ name: 'address', type: 'expression', label: 'Address', hint: 'The address' }, { name: 'city', type: 'expression', label: 'City', hint: 'The city' }, { name: 'state', type: 'expression', label: 'State', hint: 'The state' }, { name: 'zip', type: 'expression', label: 'Zip', hint: 'The zip' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpchangedir = () => ({ type: 'ftp.changedir', displayName: 'ftp.changedir,', description: 'Changes the current directory,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'dir', type: 'expression', label: 'Dir', hint: 'The directory name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpclose = () => ({ type: 'ftp.close', displayName: 'ftp.close,', description: 'Closes the sftp connection,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpdelete = () => ({ type: 'ftp.delete', displayName: 'ftp.delete,', description: 'Deletes a file from the server,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'file', type: 'expression', label: 'File', hint: 'The file name at the server' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpdownload = () => ({ type: 'ftp.download', displayName: 'ftp.download,', description: 'Downloads a file from the server,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'file', type: 'expression', label: 'File', hint: 'The file name at the server' }, { name: 'doc', type: 'expression', label: 'Doc', hint: 'The document name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpdownloadlist = () => ({ type: 'ftp.download.list', displayName: 'ftp.download.list,', description: 'Downloads a set of files from the server,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'list', type: 'expression', label: 'List', hint: 'The list to store the files' }, { name: 'obj', type: 'expression', label: 'Obj', hint: 'The object to store the files under' }, { name: 'folder', type: 'expression', label: 'Folder', hint: 'The folder' }, { name: 'del', type: 'expression', label: 'Del', hint: 'If true, delete when downloaded' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpopen = () => ({ type: 'ftp.open', displayName: 'ftp.open,', description: 'Opens an sftp connection,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'url', type: 'expression', label: 'Url', hint: 'The URl to connect to' }, { name: 'port', type: 'expression', label: 'Port', hint: 'The port' }, { name: 'user', type: 'expression', label: 'User', hint: 'The user name' }, { name: 'pwd', type: 'expression', label: 'Pwd', hint: 'The user password' }, { name: 'sftp', type: 'expression', label: 'Sftp', hint: 'True if SFTP' }, { name: 'cert', type: 'expression', label: 'Cert', hint: 'The SSH certificate if SFTP (from system wallet)' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpupload = () => ({ type: 'ftp.upload', displayName: 'ftp.upload,', description: 'Uploads a file to the server,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'file', type: 'expression', label: 'File', hint: 'The file name at the server' }, { name: 'doc', type: 'expression', label: 'Doc', hint: 'The document name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.ftpuse = () => ({ type: 'ftp.use', displayName: 'ftp.use,', description: 'Sets the default sftp connection,', category: 'FTP', icon: 'fas fa-server', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.httpcookieget = () => ({ type: 'http.cookie.get', displayName: 'http.cookie.get,', description: 'Closes the sftp connection,', category: 'HTTP', icon: 'fas fa-desktop', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'domain', type: 'expression', label: 'Domain', hint: 'The domain' }, { name: 'key', type: 'expression', label: 'Key', hint: 'The key' }, { name: 'to', type: 'expression', label: 'To', hint: 'The location of the value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.httpcookieset = () => ({ type: 'http.cookie.set', displayName: 'http.cookie.set,', description: 'Sets a cookie value in the connection,', category: 'HTTP', icon: 'fas fa-desktop', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'domain', type: 'expression', label: 'Domain', hint: 'The domain' }, { name: 'key', type: 'expression', label: 'Key', hint: 'The key' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The value' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.httpget = () => ({ type: 'http.get', displayName: 'http.get,', description: 'Does an HTTP Get,', category: 'HTTP', icon: 'fas fa-desktop', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'url', type: 'expression', label: 'Url', hint: 'The URL' }, { name: 'storeout', type: 'expression', label: 'Storeout', hint: 'The store to use as parameters' }, { name: 'storein', type: 'expression', label: 'Storein', hint: 'The store to use as return' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.httpuse = () => ({ type: 'http.use', displayName: 'http.use,', description: 'Sets the default http connection,', category: 'HTTP', icon: 'fas fa-desktop', outcomes: [OutcomeNames.Done], properties: [{ name: 'conn', type: 'expression', label: 'Conn', hint: 'The connection to use' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.workflowend = () => ({ type: 'workflow.end', displayName: 'workflow.end,', description: 'Ends a workflow on a given object,', category: 'Workflow', icon: 'fas fa-network-wired', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'wf', type: 'expression', label: 'Wf', hint: 'The workflow to start' }, { name: 'name', type: 'expression', label: 'Name', hint: 'The user defined name' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.workflowstart = () => ({ type: 'workflow.start', displayName: 'workflow.start,', description: 'Starts a workflow on a given object,', category: 'Workflow', icon: 'fas fa-network-wired', outcomes: [OutcomeNames.Done], properties: [{ name: 'obj', type: 'expression', label: 'Obj', hint: 'The name of the object' }, { name: 'wf', type: 'expression', label: 'Wf', hint: 'The workflow to start' }, { name: 'name', type: 'text', label: 'Name', hint: 'The user defined name' }, { name: 'store', type: 'expression', label: 'Store', hint: 'The store to pass' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.docpdf = () => ({ type: 'doc.pdf', displayName: 'doc.pdf,', description: 'Converts to PDF,', category: 'Document', icon: 'fas fa-file', outcomes: [OutcomeNames.Done], properties: [{ name: 'doc', type: 'expression', label: 'Doc', hint: 'The document to be merged' }, { name: 'to', type: 'expression', label: 'To', hint: 'The PDF document' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.wordpop = () => ({ type: 'word.pop', displayName: 'word.pop,', description: 'Remove word from end of string,', category: 'Word', icon: 'fas fa-keyboard', outcomes: [OutcomeNames.Done], properties: [{ name: 'string', type: 'expression', label: 'String', hint: 'The string' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'delim', type: 'expression', label: 'Delim', hint: 'The delimiter' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.wordpush = () => ({ type: 'word.push', displayName: 'word.push,', description: 'Adds text to end of string,', category: 'Word', icon: 'fas fa-keyboard', outcomes: [OutcomeNames.Done], properties: [{ name: 'string', type: 'expression', label: 'String', hint: 'The string' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'delim', type: 'expression', label: 'Delim', hint: 'The delimiter' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.wordshift = () => ({ type: 'word.shift', displayName: 'word.shift,', description: 'Remove text from front of string,', category: 'Word', icon: 'fas fa-keyboard', outcomes: [OutcomeNames.Done], properties: [{ name: 'string', type: 'expression', label: 'String', hint: 'The string' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'delim', type: 'expression', label: 'Delim', hint: 'The delimiter' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
        this.wordunshift = () => ({ type: 'word.unshift', displayName: 'word.unshift,', description: 'Adds text to front of string,', category: 'Word', icon: 'fas fa-keyboard', outcomes: [OutcomeNames.Done], properties: [{ name: 'string', type: 'expression', label: 'String', hint: 'The string' }, { name: 'value', type: 'expression', label: 'Value', hint: 'The text' }, { name: 'delim', type: 'expression', label: 'Delim', hint: 'The delimiter' }, { name: 'if', type: 'expression', label: 'If', hint: 'Execute if' }, { name: 'comment', type: 'text', label: 'Comment', hint: 'What does this step accomplish' }] });
    }
}
TaskActivities.Category = "Activity";
pluginStore.add(new TaskActivities());
