# Lists and Expressions

## Lists

A list is a sequence of ***words*** separated by one or more spaces.  For example:

```
john paul george ringo
```

Each word can be surrounded by the following delimiters:

|Delimiters|Meaning|
|-|-|
|'xxx'|Text|
|"xxx"|Text|
|[xxx]|Field|
|#xxx#|Statement|

## Fields

The following formats are available:

|Format|Meanung|
|-|-|
|[objectname:field]|A reference to an object.  If the object name is ommitted the current active object is used|
|[*storename:field]|A reference to a store.  If the store name is ommitted the current active store is used|

## Expressions

An expression is a list that when evaluated, each ***word*** will be acted upon depending on its meaning and each result
will be joined into a resultant list.  For example:

```
'My name is' [*name] 'and  today is' #today()#
```

May be evaluated to:

```
My name is John and today is December 7, 1941
```
Expressions are used through the system.

## Statements

Statements are evaluated using a set of operations and functions:

### Operators

|Syntax|Meaning|
|-|-|
|( ... )|The sub-expression is evaluated|
|Unary||
|!|Not operator, operand will be converted to boolean|
|~|Not operator, operand will be converted to boolean|
|-|Unary minus operator, operand will be converted to number|
|+|Unary plus operator, operand will be converted to number|
|Dyadic (high precedence)||
|^|Power operator, operands will be converted to numbers (a^b^c -> (a^b)^c)|
|\*|Multiplication operator, operands will be converted to numbers|
|/|Division operator, operands will be converted to numbers|
|%|Modulus operator, operands will be converted to numbers|
|Dyadic (medium precedence)||
|+|Addition operator, operands will be converted to numbers|
|-|Subtraction operator, operands will be converted to numbers|
|Dyadic (low precedence)||
|&|String concantenation operator, operands will be converted to string|
|Comparison (high precedence)||
|\<|Less than operator|
|\<=|Less than or equal to operator|
|\>|Greater than operator|
|\>=|Greater than or equal to operator|
|Comparison (low precedence)||
|=|Equal to operator|
|!=|Not equal to operator|
|\<\>|Not equal to operator|
|Conditional||
|?:|Conditional if operator|
|&&|Logical AND, operands will be converted to boolean|
|\|\||Logical OR, operands will be converted to boolean|

### Functions

{{fns}}

## Directives

Directives are macro-like operations.  They are defined with the following format:

{{definition}}

There are two types of definitions:

|Type|-Meaning|
|-|-|
|Field|Defines a field.  Similar to [xxx] above|
|Command|Defines a command.  Starts with a [[#cmd]] and ends with a [[/cmd]]|

### Commands

|Command|Parameters|Meaning|
|-|-|-|
|if|field|Directive block is used if the field exists|
|iff|field comparison  value|Directive block is used if field comparison with value is true|
||=|Equality comparison, case insensitive|
||==|Equality comparison, case insensitive|
||!=|Inequiality comparino, case insensitive|
||!==|Inequality comparison, case sensitive|
||>|Greater than comparison|
||>=|Greater than or equal to comparison|
||<|Less than comparison|
||<=|Less tha or equal to comparison|
|is|field value|Directive block is used if the field is the same as the value, case insensitive|
|isnt|field value|Directive block is used if the field is not the same as the value, case insensitive|
|unless|field|Directive block is used if field does not exist|
|each|field|Directive block is used once for each entry in the field list|
|with|field|Directive block is used with the field as the root value|
|eval|expression|Directive block is replaced with the evaluated expression|

[Home](../README.md)
